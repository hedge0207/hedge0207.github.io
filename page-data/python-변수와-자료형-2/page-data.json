{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/python-변수와-자료형-2","result":{"data":{"post":{"__typename":"MdxPost","slug":"/python-변수와-자료형-2","title":"Python 변수와 자료형(2)","date":"13.01.2021","tags":[{"name":"Python","slug":"python"}],"description":"Python 변수와 자료형(2)","canonicalUrl":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Python 변수와 자료형(2)\",\n  \"date\": \"2021-01-13T00:00:00.000Z\",\n  \"description\": \"Python 변수와 자료형(2)\",\n  \"tags\": [\"Python\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Tuple\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD29C\\uD50C \\uC0DD\\uC131\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC18C\\uAD04\\uD638\\uB85C \\uBB36\\uC5B4\\uC11C \\uC0DD\\uC131\\uD560 \\uC218\\uB3C4 \\uC788\\uACE0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC18C\\uAD04\\uD638\\uB97C \\uC0DD\\uB7B5\\uD558\\uACE0 \\uCF64\\uB9C8\\uB85C\\uB9CC \\uAD6C\\uBD84\\uD574\\uC11C \\uC0DD\\uC131\\uD560 \\uC218\\uB3C4 \\uC788\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD29C\\uD50C\\uC758 \\uC6D0\\uC18C\\uAC00 \\uD558\\uB098\\uC77C \\uACBD\\uC6B0, \\uBC18\\uB4DC\\uC2DC \\uB9C8\\uC9C0\\uB9C9\\uC5D0 \\uCF64\\uB9C8\\uB97C \\uCC0D\\uC5B4\\uC57C \\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tuple()\"), \" \\uC0DD\\uC131\\uC790\\uB97C \\uC0AC\\uC6A9\\uD560 \\uC218\\uB3C4 \\uC788\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"tup1 = (1,2,3)\\ntup2 = 1,2,3\\ntup3_1 = 1\\ntup3_2 = 1,\\ntup4 = tuple(\\\"abcde\\\")\\n\\nprint(type(tup1))   # <class 'tuple'>\\nprint(type(tup2))   # <class 'tuple'>\\nprint(type(tup3_1)) # <class 'int'>\\nprint(type(tup3_2)) # <class 'tuple'>\\nprint(tup4)         # ('a', 'b', 'c', 'd', 'e')\\n\")))), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uD29C\\uD50C\\uC758 \\uD2B9\\uC9D5\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD29C\\uD50C\\uC744 \\uD3EC\\uD568\\uD55C \\uBAA8\\uB4E0 \\uC790\\uB8CC\\uD615\\uC774 \\uD29C\\uD50C\\uC5D0 \\uD3EC\\uD568\\uB420 \\uC218 \\uC788\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC21C\\uC11C\\uAC00 \\uC788\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD55C \\uBC88 \\uC0DD\\uC131\\uB418\\uBA74 \\uAC12\\uC744 \\uBCC0\\uACBD\\uD560 \\uC218 \\uC5C6\\uB2E4.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uADF8\\uB7EC\\uB098 + \\uC5F0\\uC0B0, * \\uC5F0\\uC0B0\\uC740 \\uAC00\\uB2A5\\uD558\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD29C\\uD50C\\uC744 \\uD65C\\uC6A9\\uD558\\uBA74 \\uC5EC\\uB7EC \\uAC12\\uC744 \\uD55C \\uBC88\\uC5D0 \\uAC01\\uAE30 \\uB2E4\\uB978 \\uBCC0\\uC218\\uC5D0 \\uD560\\uB2F9\\uD558\\uB294 \\uAC83\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C1\\uAE30\\uD588\\uB4EF \\uAD73\\uC774\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \" ()\"), \"\\uB85C \\uBB36\\uC9C0 \\uC54A\\uC544\\uB3C4 \\uCF64\\uB9C8\\uB85C \\uAD6C\\uBD84\\uB9CC \\uB418\\uC5B4 \\uC788\\uC73C\\uBA74 \\uD29C\\uD50C\\uC774 \\uC0DD\\uC131\\uB41C\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD29C\\uD50C\\uC758 \\uD574\\uC81C \\uD560\\uB2F9 \\uAE30\\uB2A5\\uC744 \\uC0AC\\uC6A9\\uD558\\uBA74 \\uB450 \\uBCC0\\uC218\\uC758 \\uAC12\\uC744 \\uBC14\\uAFB8\\uB294 \\uAC83\\uB3C4 \\uAC00\\uB2A5\\uD558\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# \\uC21C\\uC11C\\uAC00 \\uC788\\uC73C\\uBBC0\\uB85C \\uC778\\uB371\\uC2A4\\uB97C \\uD1B5\\uD574 \\uC811\\uADFC\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\\ntup = ('one','two', 'three')\\nprint(tup[0:2])    # ('one', 'two')\\n\\n# \\uAC12\\uC744 \\uBCC0\\uACBD\\uD560 \\uC218 \\uC5C6\\uB2E4.\\ntup[0] = 'zero'   # 'tuple' object does not support item assignment\\n\\n# +, * \\uC5F0\\uC0B0\\uC740 \\uAC00\\uB2A5\\uD558\\uB2E4.\\ntup1 = (1,2,3)\\ntup2 = (4,5,6)\\nprint(tup1+tup2)  # (1, 2, 3, 4, 5, 6)\\nprint(tup1*2)     # (1, 2, 3, 1, 2, 3)\\n\\n# \\uC5EC\\uB7EC \\uAC12\\uC744 \\uBCC0\\uC218\\uC5D0 \\uD55C \\uBC88\\uC5D0 \\uD560\\uB2F9\\uD558\\uB294 \\uAC83\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\\nemail,phone = \\\"email@email.com\\\", \\\"010-1234-5678\\\"\\nprint(email,phone)   # email@email.com 010-1234-5678\\n\\n# \\uB450 \\uBCC0\\uC218\\uC758 \\uAC12\\uC744 \\uBC14\\uAFB8\\uB294 \\uAC83\\uB3C4 \\uAC00\\uB2A5\\uD558\\uB2E4.\\nemail, phone = phone, email\\nprint(email,phone)   # 010-1234-5678 email@email.com\\n\")))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h3\", null, \"List\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB9AC\\uC2A4\\uD2B8 \\uC0DD\\uC131\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"list()\"), \" \\uC0DD\\uC131\\uC790\\uB97C \\uC0AC\\uC6A9\\uD558\\uC5EC \\uC0DD\\uC131\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[]\"), \" \\uB85C \\uC0DD\\uC131\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst1 = list()\\nlst2 = []\\nprint(type(lst1))  # <class 'list'>\\nprint(type(lst2))  # <class 'list'>\\n\")))), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB9AC\\uC2A4\\uD2B8 \\uD2B9\\uC9D5\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9AC\\uC2A4\\uD2B8\\uB97C \\uD3EC\\uD568\\uD55C \\uBAA8\\uB4E0 \\uC790\\uB8CC\\uD615\\uC774 \\uB9AC\\uC2A4\\uD2B8\\uC5D0 \\uD3EC\\uD568\\uB420 \\uC218 \\uC788\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC21C\\uC11C\\uAC00 \\uC788\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD55C \\uBC88 \\uC0DD\\uC131\\uB41C \\uAC12\\uC744 \\uBCC0\\uACBD \\uAC00\\uB2A5\\uD558\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# \\uC21C\\uC11C\\uAC00 \\uC788\\uC73C\\uBBC0\\uB85C \\uC778\\uB371\\uC2A4\\uB97C \\uD1B5\\uD574 \\uC811\\uADFC\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\\nlst = ['one', 'two', 'three']\\nprint(lst[0:2])   # ['one', 'two']\\n\\n# \\uBCC0\\uACBD\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\\nlst[0] = 'zero'\\nprint(lst)        # ['zero', 'two', 'three']\\n\")))), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB9AC\\uC2A4\\uD2B8 \\uAD00\\uB828 \\uBA54\\uC11C\\uB4DC\"), mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uC544\\uB798 \\uBA54\\uC11C\\uB4DC\\uB4E4 \\uC911 \\uC77C\\uBD80\\uB294 \\uD29C\\uD50C, \\uBB38\\uC790\\uC5F4 \\uB4F1\\uC5D0\\uC11C\\uB3C4 \\uC0AC\\uC6A9 \\uAC00\\uB2A5\\uD558\\uB2E4.\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"len()\"), \": \\uC694\\uC18C\\uC758 \\uAC1C\\uC218\\uB97C \\uBC18\\uD658\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [1,2,3]\\nprint(len(lst))   # 3\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".append()\"), \": \\uC694\\uC18C\\uB97C \\uCD94\\uAC00\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [1,2,3]\\nlst.append(4)\\nprint(lst)   #[1, 2, 3, 4]\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".insert(\\uC778\\uB371\\uC2A4, \\uCD94\\uAC00\\uD560 \\uAC12)\"), \": \\uC9C0\\uC815\\uD55C \\uC778\\uB371\\uC2A4\\uC5D0 \\uAC12\\uC744 \\uC0BD\\uC785\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [1,2,3]\\nlst.insert(1,4)\\nprint(lst)   # [1, 4, 2, 3]\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".remove()\"), \": \\uC694\\uC18C\\uB97C \\uC0AD\\uC81C\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [1,2,3]\\nlst.remove(1)\\nprint(lst)  # [2,3]\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"del\"), \": \\uC694\\uC18C\\uB97C \\uC0AD\\uC81C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"remove\"), \"\\uC640\\uC758 \\uCC28\\uC774\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"remove\"), \"\\uB294 \\uC0AD\\uC81C\\uD560 \\uAC12\\uC744 \\uC9C0\\uC815\\uD558\\uC9C0\\uB9CC del\\uC740 \\uC0AD\\uC81C\\uD560 \\uC778\\uB371\\uC2A4\\uB97C \\uC9C0\\uC815\\uD55C\\uB2E4\\uB294 \\uAC83\\uC774\\uB2E4.\")))), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [1,2,3]\\ndel lst[1]\\nprint(lst)  # [1,3]\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".pop()\"), \": \\uB9AC\\uC2A4\\uD2B8\\uC758 \\uB9C8\\uC9C0\\uB9C9 \\uC694\\uC18C\\uB97C \\uC0AD\\uC81C \\uD6C4 \\uBC18\\uD658\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [1,2,3]\\n# \\uC0AD\\uC81C \\uD6C4 \\uBC18\\uD658\\uD55C\\uB2E4.\\nprint(lst.pop())  # 3\\nprint(lst)        # [1,2]\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".clear()\"), \": \\uBAA8\\uB4E0 \\uC694\\uC18C \\uC0AD\\uC81C\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [1,2,3]\\nlst.clear()\\nprint(lst)      # []\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".reverse()\"), \": \\uC21C\\uC11C\\uB97C \\uB4A4\\uC9D1\\uB294\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [1,2,3]\\nlst.reverse()\\nprint(lst)    # [3, 2, 1]\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".sort()\"), \": \\uC815\\uB82C\\uD55C\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [9,3,6]\\nlst.sort()\\nprint(lst)    # [3,6,9]\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sorted()\"), \": \\uC815\\uB82C\\uD55C\\uB2E4.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".sort()\"), \"\\uC640\\uC758 \\uCC28\\uC774\\uB294 \\uC6D0\\uBCF8 \\uBC30\\uC5F4\\uC744 \\uBCC0\\uACBD\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4\\uB294 \\uAC83\\uC774\\uB2E4.\")))), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"lst = [9,3,6]\\nprint(sorted(lst))  # [3,6,9]\\nprint(lst)          # [9,3,6]\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".copy()\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCF5\\uC0AC\\uC5D0\\uB294 \\uC595\\uC740 \\uBCF5\\uC0AC\\uC640 \\uAE4A\\uC740 \\uBCF5\\uC0AC\\uAC00 \\uC788\\uB294\\uB370 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".copy()\"), \"\\uB97C \\uC0AC\\uC6A9\\uD558\\uBA74 \\uAE4A\\uC740 \\uBCF5\\uC0AC\\uAC00 \\uAC00\\uB2A5\\uD558\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[:]\"), \"\\uB97C \\uD65C\\uC6A9\\uD574\\uB3C4 \\uAE4A\\uC740 \\uBCF5\\uC0AC\\uAC00 \\uAC00\\uB2A5\\uD558\\uB2E4.\")))), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# \\uC595\\uC740 \\uBCF5\\uC0AC\\nlst1 = [1,2,3]\\nlst2 = lst1  \\nlst2[0] = 9\\n# \\uC595\\uC740 \\uBCF5\\uC0AC\\uC774\\uAE30\\uC5D0 \\uAC19\\uC740 \\uAC1D\\uCCB4\\uB97C \\uAC00\\uB9AC\\uD0A4\\uACE0 \\uC788\\uC5B4 \\uD558\\uB098\\uB97C \\uBCC0\\uACBD\\uD558\\uBA74 \\uB458 \\uB2E4 \\uBCC0\\uACBD\\uB41C\\uB2E4.\\nprint(lst1,lst2)  # [9, 2, 3] [9, 2, 3]\\n\\n# \\uAE4A\\uC740 \\uBCF5\\uC0AC\\nlst1 = [1,2,3]\\nlst2 = lst1.copy()\\nlst2[0] = 9\\n# \\uAE4A\\uC740 \\uBCF5\\uC0AC\\uC774\\uAE30\\uC5D0 \\uC11C\\uB85C \\uB2E4\\uB978 \\uAC1D\\uCCB4\\uB97C \\uAC00\\uB9AC\\uD0A4\\uACE0 \\uC788\\uC5B4 \\uD558\\uB098\\uB97C \\uBCC0\\uACBD\\uD574\\uB3C4 \\uB2E4\\uB978 \\uD558\\uB098\\uB294 \\uBCC0\\uACBD\\uB418\\uC9C0 \\uC54A\\uB294\\uB2E4.\\nprint(lst1,lst2)  # [1, 2, 3] [9, 2, 3]\\n\\n# [:]\\uB97C \\uD65C\\uC6A9\\uD55C \\uAE4A\\uC740 \\uBCF5\\uC0AC\\nlst1 = [1,2,3]\\nlst2 = lst1[:]\\nlst2[0] = 9\\nprint(lst1,lst2)  # [1, 2, 3] [9, 2, 3]\\n\")))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h3\", null, \"Dictionary\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC0DD\\uC131\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dict()\"), \"\\uC0DD\\uC131\\uC790\\uB97C \\uC0AC\\uC6A9\\uD574 \\uC0DD\\uC131 \\uAC00\\uB2A5\\uD558\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{}\"), \"\\uB97C \\uC0AC\\uC6A9\\uD574 \\uC0DD\\uC131 \\uAC00\\uB2A5\\uD558\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"dict1 = dict()\\ndict2 = {}\\nprint(type(dict1))  # <class 'dict'>\\nprint(type(dict2))  # <class 'dict'>\\n\")))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB515\\uC154\\uB108\\uB9AC\\uC758 \\uD2B9\\uC9D5\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD0A4(key)-\\uAC12(value) \\uC30D\\uC744 \\uC694\\uC18C\\uB85C \\uAC16\\uB294 \\uC790\\uB8CC\\uD615\\uC774\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD0A4\\uB294 \\uC911\\uBCF5\\uC774 \\uBD88\\uAC00\\uB2A5\\uD558\\uB2E4.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD0A4\\uB97C \\uC911\\uBCF5\\uC73C\\uB85C \\uC0AC\\uC6A9\\uD560 \\uACBD\\uC6B0 \\uD558\\uB098\\uC758 \\uD0A4\\uB97C \\uC81C\\uC678\\uD55C \\uBAA8\\uB4E0 \\uC911\\uBCF5\\uB41C \\uD0A4\\uB294 \\uBB34\\uC2DC\\uB41C\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD0A4\\uB294 \\uBCC0\\uACBD immutable \\uD0C0\\uC785\\uC774\\uC5B4\\uC57C \\uD558\\uBA70 \\uAC12\\uC740 immutable\\uACFC mutable \\uBAA8\\uB450 \\uAC00\\uB2A5\\uD558\\uB2E4.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCC0\\uACBD \\uBD88\\uAC00\\uB2A5\\uD55C \\uBB38\\uC790\\uC5F4\\uC774\\uB098 \\uD29C\\uD50C \\uB4F1\\uC740 \\uD0A4\\uAC00 \\uB420 \\uC218 \\uC788\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCC0\\uACBD \\uAC00\\uB2A5\\uD55C \\uB9AC\\uC2A4\\uD2B8\\uB294 \\uD0A4\\uAC00 \\uB420 \\uC218 \\uC5C6\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC12\\uC5D0\\uB294 \\uB515\\uC154\\uB108\\uB9AC\\uB97C \\uD3EC\\uD568\\uD55C \\uBAA8\\uB4E0 \\uC790\\uB8CC\\uD615\\uC774 \\uC62C \\uC218 \\uC788\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC21C\\uC11C\\uAC00 \\uC5C6\\uB294 \\uC790\\uB8CC\\uD615\\uC73C\\uB85C key\\uB97C \\uD1B5\\uD574 \\uAC12\\uC5D0 \\uC811\\uADFC\\uD574\\uC57C \\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uBBF8 \\uC785\\uB825\\uB41C \\uAC12\\uC758 \\uBCC0\\uACBD\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC694\\uC18C\\uC758 \\uCD94\\uAC00\\uC640 \\uC0AD\\uC81C\\uAC00 \\uAC00\\uB2A5\\uD558\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# key\\uC5D0\\uB294 \\uBCC0\\uACBD \\uBD88\\uAC00\\uB2A5\\uD55C \\uC790\\uB8CC\\uD615\\uC774, \\uAC12\\uC5D0\\uB294 \\uBAA8\\uB4E0 \\uC790\\uB8CC\\uD615\\uC774 \\uC62C \\uC218 \\uC788\\uB2E4.\\nmy_dict = {\\\"\\uCDE8\\uBBF8\\\":['\\uCD95\\uAD6C','\\uC57C\\uAD6C'],\\\"\\uC774\\uB984\\\":'\\uD64D\\uAE38\\uB3D9',\\\"\\uB098\\uC774\\\":28,\\\"\\uAC00\\uC871\\\":{\\\"\\uC5C4\\uB9C8\\\":\\\"\\uAE40\\uC5C4\\uB9C8\\\",\\\"\\uC544\\uBE60\\\":\\\"\\uD64D\\uC544\\uBE60\\\"}}\\n\\n# key\\uB97C \\uD1B5\\uD574 \\uAC12\\uC5D0 \\uC811\\uADFC\\uD560 \\uC218 \\uC788\\uB2E4.\\nprint(my_dict['\\uC774\\uB984'])      # \\uD64D\\uAE38\\uB3D9\\n\\n# \\uBCC0\\uACBD\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\\nmy_dict['\\uB098\\uC774']=14\\nprint(my_dict['\\uB098\\uC774'])      # 14 \\n\\n# \\uC694\\uC18C(\\uD0A4-\\uAC12) \\uCD94\\uAC00\\nmy_dict[\\\"email\\\"] = \\\"email@email.com\\\"\\nprint(my_dict[\\\"email\\\"])    # email@email.com\\n\\n\\n# \\uC694\\uC18C(\\uD0A4-\\uAC12) \\uC0AD\\uC81C\\ndel my_dict['email']\\nprint(my_dict)  # {'\\uCDE8\\uBBF8': ['\\uCD95\\uAD6C', '\\uC57C\\uAD6C'], '\\uC774\\uB984': '\\uD64D\\uAE38\\uB3D9', '\\uB098\\uC774': 14, '\\uAC00\\uC871': {'\\uC5C4\\uB9C8': '\\uAE40\\uC5C4\\uB9C8', '\\uC544\\uBE60': '\\uD64D\\uC544\\uBE60'}}\\n\")))), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB515\\uC154\\uB108\\uB9AC \\uAD00\\uB828 \\uD568\\uC218\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".keys()\"), \": key\\uB97C \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uBC18\\uD658\\uD55C\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_dict = {\\\"\\uCDE8\\uBBF8\\\":['\\uCD95\\uAD6C','\\uC57C\\uAD6C'],\\\"\\uC774\\uB984\\\":'\\uD64D\\uAE38\\uB3D9',\\\"\\uB098\\uC774\\\":28}\\nprint(my_dict.keys())  # dict_keys(['\\uCDE8\\uBBF8', '\\uC774\\uB984', '\\uB098\\uC774'])\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".values()\"), \": \\uAC12\\uC744 \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uBC18\\uD658\\uD55C\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_dict = {\\\"\\uCDE8\\uBBF8\\\":['\\uCD95\\uAD6C','\\uC57C\\uAD6C'],\\\"\\uC774\\uB984\\\":'\\uD64D\\uAE38\\uB3D9',\\\"\\uB098\\uC774\\\":28}\\nprint(my_dict.values())  # dict_values([['\\uCD95\\uAD6C', '\\uC57C\\uAD6C'], '\\uD64D\\uAE38\\uB3D9', 28])\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".items()\"), \": \\uD0A4-\\uAC12 \\uC30D\\uC744 \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uBC18\\uD658\\uD55C\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_dict = {\\\"\\uCDE8\\uBBF8\\\":['\\uCD95\\uAD6C','\\uC57C\\uAD6C'],\\\"\\uC774\\uB984\\\":'\\uD64D\\uAE38\\uB3D9',\\\"\\uB098\\uC774\\\":28}\\nprint(my_dict.items()) # dict_items([('\\uCDE8\\uBBF8', ['\\uCD95\\uAD6C', '\\uC57C\\uAD6C']), ('\\uC774\\uB984', '\\uD64D\\uAE38\\uB3D9'), ('\\uB098\\uC774', 28)])\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".clear()\"), \": \\uBAA8\\uB4E0 \\uC694\\uC18C \\uC0AD\\uC81C\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_dict = {\\\"\\uCDE8\\uBBF8\\\":['\\uCD95\\uAD6C','\\uC57C\\uAD6C'],\\\"\\uC774\\uB984\\\":'\\uD64D\\uAE38\\uB3D9',\\\"\\uB098\\uC774\\\":28}\\nmy_dict.clear()\\nprint(my_dict)  # {}\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".get()\"), \": \\uD0A4\\uB85C \\uAC12 \\uC5BB\\uAE30\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uADF8\\uB0E5 \\uD0A4\\uB85C\\uB9CC \\uC811\\uADFC\\uD558\\uB294 \\uAC83\\uACFC\\uC758 \\uCC28\\uC774\\uB294 \\uC874\\uC7AC\\uD558\\uC9C0 \\uC54A\\uB294 \\uD0A4\\uB85C \\uC811\\uADFC\\uD560 \\uACBD\\uC6B0, \\uD0A4\\uB85C\\uB9CC \\uC811\\uADFC\\uD558\\uBA74 error\\uAC00 \\uBC1C\\uC0DD\\uD558\\uC9C0\\uB9CC,  \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".get()\"), \"\\uC740 None\\uC744 \\uBC18\\uD658\\uD55C\\uB2E4\\uB294 \\uAC83\\uC774\\uB2E4.\")))), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_dict = {\\\"\\uCDE8\\uBBF8\\\":['\\uCD95\\uAD6C','\\uC57C\\uAD6C'],\\\"\\uC774\\uB984\\\":'\\uD64D\\uAE38\\uB3D9',\\\"\\uB098\\uC774\\\":28}\\nprint(my_dict['email'])      # KeyError: 'email'\\nprint(my_dict.get('email'))  # None\\n\")))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h3\", null, \"Set\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC0DD\\uC131\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uB978 \\uC790\\uB8CC\\uD615\\uB4E4\\uACFC \\uB2EC\\uB9AC set\\uC740 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"set()\"), \" \\uC0DD\\uC131\\uC790\\uB85C\\uB9CC \\uC0DD\\uC131\\uD560 \\uC218 \\uC788\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC18\\uB4DC\\uC2DC \\uBB38\\uC790\\uC5F4 \\uB610\\uB294 \\uAD04\\uD638\\uB85C \\uBB36\\uC5B4\\uC918\\uC57C \\uD55C\\uB2E4(\\uAD04\\uD638\\uC758 \\uC885\\uB958\\uB294 \\uC0C1\\uAD00 \\uC5C6\\uB2E4).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBE44\\uC5B4\\uC788\\uB294 \\uC790\\uB8CC\\uD615\\uB3C4 \\uC0DD\\uC131 \\uAC00\\uB2A5\\uD558\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_set1 = set({1,2,3})\\nmy_set2 = set(\\\"Hello!\\\")\\nmy_set3 = set()\\n\\nprint(type(my_set1))  # <class 'set'>\\nprint(type(my_set2))  # <class 'set'>\\nprint(my_set1)        # {1, 2, 3}\\nprint(my_set2)        # {'l', '!', 'o', 'e', 'H'}\\nprint(my_set3)        # set()\\n\")))), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Set(\\uC9D1\\uD569) \\uC790\\uB8CC\\uD615\\uC758 \\uD2B9\\uC9D5\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC911\\uBCF5\\uC744 \\uD5C8\\uC6A9\\uD558\\uC9C0 \\uC54A\\uB294\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC21C\\uC11C\\uAC00 \\uC5C6\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_set = set(\\\"Hello!\\\")\\n\\nprint(my_set2)        # {'l', '!', 'o', 'e', 'H'}\\n# \\uC911\\uBCF5\\uC744 \\uD5C8\\uC6A9\\uD558\\uC9C0 \\uC54A\\uAE30\\uC5D0 \\uB450 \\uBC88 \\uB4E4\\uC5B4\\uAC04 l\\uC740 \\uD558\\uB098\\uB9CC \\uB4E4\\uC5B4\\uAC00\\uAC8C \\uB41C\\uB2E4.\\n# \\uC21C\\uC11C\\uAC00 \\uC5C6\\uAE30\\uC5D0 \\uC21C\\uC11C\\uB300\\uB85C \\uB4E4\\uC5B4\\uAC00\\uC9C0 \\uC54A\\uB294\\uB2E4.\\n\")))), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAD50\\uC9D1\\uD569, \\uD569\\uC9D1\\uD569, \\uCC28\\uC9D1\\uD569 \\uAD6C\\uD558\\uAE30\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_set1 = set([1,2,3])\\nmy_set2 = set([3,4,5])\\n\\n# \\uAD50\\uC9D1\\uD569\\nprint(my_set1 & my_set2)                # {3}\\nprint(my_set1.intersection(my_set2))    # {3}\\n\\n# \\uD569\\uC9D1\\uD569\\nprint(my_set1 | my_set2)                # {1, 2, 3, 4, 5}\\nprint(my_set1.union(my_set2))           # {1, 2, 3, 4, 5}\\n\\n# \\uCC28\\uC9D1\\uD569\\nprint(my_set1-my_set2)                  # {1, 2}\\nprint(my_set1.difference(my_set2))      # {1, 2}\\nprint(my_set2-my_set1)                  # {4, 5}\\nprint(my_set2.difference(my_set1))      # {4, 5}\\n\")))), mdx(\"br\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC9D1\\uD569 \\uAD00\\uB828 \\uD568\\uC218\\uB4E4\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".add()\"), \": \\uC694\\uC18C\\uB97C 1\\uAC1C \\uCD94\\uAC00\\uD55C\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_set = set([1,2,3])\\nmy_set.add(4)\\nprint(my_set)   # {1, 2, 3, 4}\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".update()\"), \": \\uC694\\uC18C \\uC5EC\\uB7EC \\uAC1C \\uCD94\\uAC00\\uD558\\uAE30\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_set = set([1,2,3])\\nmy_set.update([4,5,6])\\nprint(my_set)   # {1, 2, 3, 4, 5, 6}\\n\")), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".remove()\"), \": \\uD2B9\\uC815 \\uC694\\uC18C \\uC81C\\uAC70\\uD558\\uAE30\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"my_set = set([1,2,3])\\nmy_set.remove(2)\\nprint(my_set)   # {1, 3}\\n\")))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h2\", null, \"\\uC790\\uB8CC\\uD615\\uC758 \\uBCC0\\uACBD\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"str()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"int()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"float()\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bool()\"), \" \\uB4F1\\uC758 \\uD568\\uC218\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C \\uBCC0\\uACBD\\uD558\\uBA74 \\uB41C\\uB2E4.\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC8FC\\uC758\\uC810\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"int()\"), \"\\uC758 \\uACBD\\uC6B0 \\uC22B\\uC790\\uAC00 \\uC544\\uB2CC \\uAC83\\uC744 \\uC22B\\uC790\\uB85C \\uBCC0\\uD658\\uD560 \\uC218 \\uC5C6\\uC73C\\uBA70, \\uC18C\\uC218\\uC810\\uC774 \\uC788\\uB294 \\uC22B\\uC790 \\uD615\\uC2DD\\uC758 \\uBB38\\uC790\\uC5F4\\uC744 \\uC815\\uC218\\uD615\\uC73C\\uB85C \\uBCC0\\uD658\\uD560 \\uC218 \\uC5C6\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC18C\\uC218\\uC810\\uC774 \\uC5C6\\uB294 \\uC22B\\uC790 \\uD615\\uC2DD\\uC758 \\uBB38\\uC790\\uC5F4\\uC740 \\uC815\\uC218\\uD615\\uC73C\\uB85C \\uBCC0\\uD658\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC18C\\uC218\\uC810\\uC774 \\uC788\\uB4E0 \\uC5C6\\uB4E0 \\uC22B\\uC790 \\uD615\\uC2DD\\uC774\\uAE30\\uB9CC \\uD558\\uBA74 \\uC2E4\\uC218\\uD615\\uC73C\\uB85C \\uBCC0\\uD658\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCC0\\uD658 \\uD568\\uC218\\uB294 \\uBCC0\\uD658\\uB41C \\uAC12\\uC744 \\uBC18\\uD658\\uD560 \\uBFD0 \\uC2E4\\uC81C\\uB85C \\uC790\\uB8CC\\uD615\\uC744 \\uBCC0\\uACBD\\uC2DC\\uD0A4\\uB294 \\uAC83\\uC740 \\uC544\\uB2C8\\uB2E4.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# \\uC22B\\uC790 \\uD615\\uC2DD\\uC778 \\uBB38\\uC790\\uC5F4\\uC758 \\uC815\\uC218\\uC640 \\uC2E4\\uC218 \\uBCC0\\uD658\\nchr = \\\"1\\\"\\nprint(type(int(chr)))       # <class 'int'>\\nprint(type(float(chr)))     # <class 'float'>\\n\\n# \\uBCC0\\uD658 \\uD568\\uC218\\uB294 \\uBCC0\\uD658\\uB41C \\uAC12\\uC744 \\uBC18\\uD658\\uB9CC \\uD560 \\uBFD0\\uC774\\uB2E4.\\nvar = True\\nprint(type(str(var)))   # <class 'str'>\\nprint(type(var))        # <class 'bool'>\\n\\n# \\uC544\\uB798\\uC640 \\uAC19\\uC774 \\uC7AC\\uD560\\uB2F9 \\uD574\\uC8FC\\uAC70\\uB098 \\uB2E4\\uB978 \\uBCC0\\uC218\\uC5D0 \\uB2F4\\uC544\\uC11C \\uC0AC\\uC6A9\\uD574\\uC57C \\uD55C\\uB2E4.\\nvar = True\\nvar = str(var)\\nprint(type(var))        # <class 'str'>\\n\")))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h2\", null, \"\\uCC38\\uACE0\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://wikidocs.net/book/1\"\n  }), \"https://wikidocs.net/book/1\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Tuple 튜플 생성 소괄호로 묶어서 생성할 수도 있고 소괄호를 생략하고 콤마로만 구분해서 생성할 수도 있다. 튜플의 원소가 하나일 경우, 반드시 마지막에 콤마를 찍어야 한다. tuple…","timeToRead":2,"banner":null}},"pageContext":{"slug":"/python-변수와-자료형-2","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["3090400250","3090400250","3090400250","318001574"]}